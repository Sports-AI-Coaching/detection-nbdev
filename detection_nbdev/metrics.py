# AUTOGENERATED! DO NOT EDIT! File to edit: 02_metrics.ipynb (unless otherwise specified).

__all__ = ['bbox_iou', 'hungarian_loss']

# Cell
import torch
from scipy.optimize import linear_sum_assignment

# Cell
def bbox_iou(boxA, boxB):
    # determine the (x, y)-coordinates of the intersection rectangle
    xA = max(boxA[0], boxB[0])
    yA = max(boxA[1], boxB[1])
    xB = min(boxA[2], boxB[2])
    yB = min(boxA[3], boxB[3])
    # compute the area of intersection rectangle
    interArea = max(0, xB - xA + 1) * max(0, yB - yA + 1)
    # compute the area of both the prediction and ground-truth
    # rectangles
    boxAArea = (boxA[2] - boxA[0] + 1) * (boxA[3] - boxA[1] + 1)
    boxBArea = (boxB[2] - boxB[0] + 1) * (boxB[3] - boxB[1] + 1)
    # compute the intersection over union by taking the intersection
    # area and dividing it by the sum of prediction + ground-truth
    # areas - the interesection area
    iou = interArea / float(boxAArea + boxBArea - interArea)
    # return the intersection over union value
    return iou

# Cell
def hungarian_loss(boxesA, boxesB, loss_func=bbox_iou, maximize=True):
    n = max(len(boxesA), len(boxesB))
    cost_matrix = torch.zeros((n,n))

    for i, boxA in enumerate(boxesA):
        for j, boxB in enumerate(boxesB):
            if boxA is None or boxB is None:
                cost_matrix[i,j] = int(not maximize)
            else:
                cost_matrix[i, j] = bbox_iou(boxA, boxB)

    row_ind, col_ind = linear_sum_assignment(cost_matrix, maximize=maximize)
    return cost_matrix[row_ind, col_ind].mean()